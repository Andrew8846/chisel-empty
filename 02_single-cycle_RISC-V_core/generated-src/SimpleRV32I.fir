circuit SimpleRV32I :
  module RV32Icore :
    input clock : Clock
    input reset : Reset
    output io : { check_res : UInt<32>}

    cmem IMem : UInt<32> [4096] @[core.scala 66:17]
    reg pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[core.scala 73:19]
    cmem regFile : UInt<32> [32] @[core.scala 75:20]
    infer mport MPORT = regFile[UInt<1>("h0")], clock @[core.scala 77:10]
    MPORT <= UInt<1>("h0") @[core.scala 77:14]
    wire instr : UInt<32> @[core.scala 84:20]
    node _instr_T = dshr(pc, UInt<2>("h2")) @[core.scala 85:19]
    node _instr_T_1 = bits(_instr_T, 11, 0) @[core.scala 85:16]
    infer mport instr_MPORT = IMem[_instr_T_1], clock @[core.scala 85:16]
    instr <= instr_MPORT @[core.scala 85:9]
    node opcode = bits(instr, 6, 0) @[core.scala 91:21]
    node rd = bits(instr, 11, 7) @[core.scala 92:21]
    node funct3 = bits(instr, 14, 12) @[core.scala 93:21]
    node rs1 = bits(instr, 19, 15) @[core.scala 94:21]
    node rs2 = bits(instr, 24, 20) @[core.scala 95:21]
    node funct7 = bits(instr, 31, 25) @[core.scala 96:21]
    node imm = bits(instr, 31, 20) @[core.scala 97:18]
    node _isADD_T = eq(opcode, UInt<6>("h33")) @[core.scala 100:24]
    node _isADD_T_1 = eq(funct3, UInt<1>("h0")) @[core.scala 100:51]
    node _isADD_T_2 = and(_isADD_T, _isADD_T_1) @[core.scala 100:41]
    node _isADD_T_3 = eq(funct7, UInt<1>("h0")) @[core.scala 100:74]
    node isADD = and(_isADD_T_2, _isADD_T_3) @[core.scala 100:64]
    node _isSUB_T = eq(opcode, UInt<6>("h33")) @[core.scala 101:24]
    node _isSUB_T_1 = eq(funct3, UInt<1>("h0")) @[core.scala 101:51]
    node _isSUB_T_2 = and(_isSUB_T, _isSUB_T_1) @[core.scala 101:41]
    node _isSUB_T_3 = eq(funct7, UInt<6>("h20")) @[core.scala 101:74]
    node isSUB = and(_isSUB_T_2, _isSUB_T_3) @[core.scala 101:64]
    node _isSLL_T = eq(opcode, UInt<6>("h33")) @[core.scala 102:24]
    node _isSLL_T_1 = eq(funct3, UInt<1>("h1")) @[core.scala 102:51]
    node _isSLL_T_2 = and(_isSLL_T, _isSLL_T_1) @[core.scala 102:41]
    node _isSLL_T_3 = eq(funct7, UInt<1>("h0")) @[core.scala 102:74]
    node isSLL = and(_isSLL_T_2, _isSLL_T_3) @[core.scala 102:64]
    node _isSLT_T = eq(opcode, UInt<6>("h33")) @[core.scala 103:24]
    node _isSLT_T_1 = eq(funct3, UInt<2>("h2")) @[core.scala 103:51]
    node _isSLT_T_2 = and(_isSLT_T, _isSLT_T_1) @[core.scala 103:41]
    node _isSLT_T_3 = eq(funct7, UInt<1>("h0")) @[core.scala 103:74]
    node isSLT = and(_isSLT_T_2, _isSLT_T_3) @[core.scala 103:64]
    node _isSRL_T = eq(opcode, UInt<6>("h33")) @[core.scala 104:24]
    node _isSRL_T_1 = eq(funct3, UInt<3>("h5")) @[core.scala 104:51]
    node _isSRL_T_2 = and(_isSRL_T, _isSRL_T_1) @[core.scala 104:41]
    node _isSRL_T_3 = eq(funct7, UInt<1>("h0")) @[core.scala 104:74]
    node isSRL = and(_isSRL_T_2, _isSRL_T_3) @[core.scala 104:64]
    node _isSRA_T = eq(opcode, UInt<6>("h33")) @[core.scala 105:24]
    node _isSRA_T_1 = eq(funct3, UInt<3>("h5")) @[core.scala 105:51]
    node _isSRA_T_2 = and(_isSRA_T, _isSRA_T_1) @[core.scala 105:41]
    node _isSRA_T_3 = eq(funct7, UInt<6>("h20")) @[core.scala 105:74]
    node isSRA = and(_isSRA_T_2, _isSRA_T_3) @[core.scala 105:64]
    node _isXOR_T = eq(opcode, UInt<6>("h33")) @[core.scala 106:24]
    node _isXOR_T_1 = eq(funct3, UInt<3>("h4")) @[core.scala 106:51]
    node _isXOR_T_2 = and(_isXOR_T, _isXOR_T_1) @[core.scala 106:41]
    node _isXOR_T_3 = eq(funct7, UInt<1>("h0")) @[core.scala 106:74]
    node isXOR = and(_isXOR_T_2, _isXOR_T_3) @[core.scala 106:64]
    node _isOR_T = eq(opcode, UInt<6>("h33")) @[core.scala 107:24]
    node _isOR_T_1 = eq(funct3, UInt<3>("h6")) @[core.scala 107:51]
    node _isOR_T_2 = and(_isOR_T, _isOR_T_1) @[core.scala 107:41]
    node _isOR_T_3 = eq(funct7, UInt<1>("h0")) @[core.scala 107:74]
    node isOR = and(_isOR_T_2, _isOR_T_3) @[core.scala 107:64]
    node _isAND_T = eq(opcode, UInt<6>("h33")) @[core.scala 108:24]
    node _isAND_T_1 = eq(funct3, UInt<3>("h7")) @[core.scala 108:51]
    node _isAND_T_2 = and(_isAND_T, _isAND_T_1) @[core.scala 108:41]
    node _isAND_T_3 = eq(funct7, UInt<1>("h0")) @[core.scala 108:74]
    node isAND = and(_isAND_T_2, _isAND_T_3) @[core.scala 108:64]
    node _isADDI_T = eq(opcode, UInt<5>("h13")) @[core.scala 112:24]
    node _isADDI_T_1 = eq(funct3, UInt<1>("h0")) @[core.scala 112:51]
    node isADDI = and(_isADDI_T, _isADDI_T_1) @[core.scala 112:41]
    infer mport operandA = regFile[rs1], clock @[core.scala 117:25]
    infer mport operandB = regFile[rs2], clock @[core.scala 118:25]
    wire aluResult : UInt<32> @[core.scala 124:23]
    when isADDI : @[core.scala 126:16]
      node _aluResult_T = add(operandA, imm) @[core.scala 127:27]
      node _aluResult_T_1 = tail(_aluResult_T, 1) @[core.scala 127:27]
      aluResult <= _aluResult_T_1 @[core.scala 127:15]
    else :
      when isADD : @[core.scala 128:21]
        node _aluResult_T_2 = add(operandA, operandB) @[core.scala 129:27]
        node _aluResult_T_3 = tail(_aluResult_T_2, 1) @[core.scala 129:27]
        aluResult <= _aluResult_T_3 @[core.scala 129:15]
      else :
        when isSUB : @[core.scala 130:21]
          node _aluResult_T_4 = sub(operandA, operandB) @[core.scala 131:27]
          node _aluResult_T_5 = tail(_aluResult_T_4, 1) @[core.scala 131:27]
          aluResult <= _aluResult_T_5 @[core.scala 131:15]
        else :
          when isAND : @[core.scala 132:21]
            node _aluResult_T_6 = and(operandA, operandB) @[core.scala 133:27]
            aluResult <= _aluResult_T_6 @[core.scala 133:15]
          else :
            when isOR : @[core.scala 134:20]
              node _aluResult_T_7 = or(operandA, operandB) @[core.scala 135:27]
              aluResult <= _aluResult_T_7 @[core.scala 135:15]
            else :
              when isXOR : @[core.scala 136:20]
                node _aluResult_T_8 = xor(operandA, operandB) @[core.scala 137:27]
                aluResult <= _aluResult_T_8 @[core.scala 137:15]
              else :
                when isSLL : @[core.scala 138:21]
                  node _aluResult_T_9 = bits(operandB, 4, 0) @[core.scala 139:38]
                  node _aluResult_T_10 = dshl(operandA, _aluResult_T_9) @[core.scala 139:27]
                  aluResult <= _aluResult_T_10 @[core.scala 139:15]
                else :
                  when isSLT : @[core.scala 140:21]
                    node _aluResult_T_11 = bits(operandB, 4, 0) @[core.scala 141:38]
                    node _aluResult_T_12 = dshl(operandA, _aluResult_T_11) @[core.scala 141:27]
                    aluResult <= _aluResult_T_12 @[core.scala 141:15]
                  else :
                    when isSRL : @[core.scala 142:21]
                      node _aluResult_T_13 = bits(operandB, 4, 0) @[core.scala 143:38]
                      node _aluResult_T_14 = dshr(operandA, _aluResult_T_13) @[core.scala 143:27]
                      aluResult <= _aluResult_T_14 @[core.scala 143:15]
                    else :
                      when isSRA : @[core.scala 144:21]
                        node _aluResult_T_15 = bits(operandB, 4, 0) @[core.scala 150:38]
                        node _aluResult_T_16 = dshr(operandA, _aluResult_T_15) @[core.scala 150:27]
                        aluResult <= _aluResult_T_16 @[core.scala 150:15]
                      else :
                        aluResult <= UInt<10>("h29a") @[core.scala 155:15]
    wire writeBackData : UInt<32> @[core.scala 171:27]
    writeBackData <= aluResult @[core.scala 172:17]
    infer mport MPORT_1 = regFile[rd], clock @[core.scala 174:10]
    MPORT_1 <= writeBackData @[core.scala 174:15]
    io.check_res <= writeBackData @[core.scala 177:16]
    node _pc_T = add(pc, UInt<3>("h4")) @[core.scala 181:12]
    node _pc_T_1 = tail(_pc_T, 1) @[core.scala 181:12]
    pc <= _pc_T_1 @[core.scala 181:6]

  module SimpleRV32I :
    input clock : Clock
    input reset : UInt<1>
    output io : { result : UInt<32>}

    inst core of RV32Icore @[SimpleRISCV32I.scala 20:20]
    core.clock <= clock
    core.reset <= reset
    io.result <= core.io.check_res @[SimpleRISCV32I.scala 22:19]

